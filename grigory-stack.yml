version: '3.9'

x-environment: &environment
  DATABASE_URL: postgres://grigory:grigory@postgres:5432/grigory
  REDIS_URL: redis://redis:6379
  DJANGO_DEBUG: ${DJANGO_DEBUG:-True}
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-}
  DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-}
  DJANGO_CSRF_TRUSTED_ORIGINS: ${DJANGO_CSRF_TRUSTED_ORIGINS:-}
  DJANGO_LANGUAGE_CODE: ${DJANGO_LANGUAGE_CODE:-}
  DJANGO_USE_TZ: ${DJANGO_USE_TZ:-True}
  DJANGO_TIME_ZONE: ${DJANGO_TIME_ZONE:-}
  DJANGO_COLLECT_STATIC: ${DJANGO_COLLECT_STATIC:-True}
  BASE_PATH: ${BASE_PATH:-}
  DJANGO_REST_EXPOSE_AUTH_API: ${DJANGO_REST_EXPOSE_AUTH_API:-}
  EXPOSE_DEMO_SITE: ${EXPOSE_DEMO_SITE:-}

x-common: &common
  volumes:
    - static:/usr/share/nginx/html/static
    - media:/usr/share/nginx/html/media
  networks:
    - default

x-app-common: &app-common
  image: anttek/grigory:${TAG:-latest}
  environment: *environment

services:
  postgres:
    image: postgres:12
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      - POSTGRES_DB=grigory
      - POSTGRES_USER=grigory
      - POSTGRES_PASSWORD=grigory
    volumes:
      - postgres_data:/var/lib/postgresql/data/
  redis:
    image: redis:alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  nginx:
    image: nginx:alpine
    <<: *common
    entrypoint:
      - /bin/sh
      - -c
      - |
        rm /etc/nginx/conf.d/default.conf
        cat <<EOF > /etc/nginx/conf.d/default.conf
        upstream django {
            server django:8000;
        }
        server {
            listen 8000;
            
            location /${BASE_PATH} {
                proxy_pass http://django;
                proxy_set_header Upgrade "\$$http_upgrade";
                proxy_set_header Connection "Upgrade";
                proxy_set_header Host "\$$http_host";
                proxy_set_header X-Forwarded-For "\$$proxy_add_x_forwarded_for";
                proxy_set_header X-Real-IP "\$$remote_addr";
            }
            location /${BASE_PATH}/static/ {
                alias /usr/share/nginx/html/static/;
            }
            location /${BASE_PATH}/media/ {
                alias /usr/share/nginx/html/media/;
            }
        }
        EOF
        nginx -g "daemon off;"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.${STACK_NAME}.loadbalancer.server.port=8000"
        - "traefik.http.middlewares.${STACK_NAME}-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.${STACK_NAME}-redirect.redirectscheme.port=443"
        - "traefik.http.middlewares.${STACK_NAME}-redirect.redirectscheme.permanent=true"
        - "traefik.http.routers.${STACK_NAME}.rule=Host(`${VIRTUAL_HOST}`)"
        - "traefik.http.routers.${STACK_NAME}.entrypoints=https"
        - "traefik.http.routers.${STACK_NAME}.tls=true"
        - "traefik.http.routers.${STACK_NAME}.middlewares=${STACK_NAME}-redirect"
        - "traefik.http.routers.${STACK_NAME}.tls.certresolver=production"
        - "traefik.http.routers.${STACK_NAME}.tls.domains[0].main=${VIRTUAL_HOST}"
        - "traefik.docker.network=traefik_default"
    networks:
      - default
      - traefik_default
  django:
    <<: *app-common
    <<: *common
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    entrypoint: /app/entrypoint.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 30s
  celery:
    <<: *app-common
    <<: *common
    command: celery -A core worker -l debug --concurrency 1 -P solo -E
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "celery", "-A", "core", "inspect", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
  celery-beat:
    <<: *app-common
    <<: *common
    command: celery -A core beat -l debug
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  traefik_default:
    external: true

volumes:
  postgres_data:
  static:
  media:

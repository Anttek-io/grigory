{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Grigory","text":"<p>Grigory is backend for notification service, real-time chats and microservices communication. You don't need to implement all the logic for chats and notifications from scratch. It's built on top of Django and Django Channels. It's designed to be used as a microservice in a microservice architecture,  but can be used as a standalone service as well. It provides both REST API and WebSockets for clients and microservices.  </p> <p>If you find this project useful, please consider giving it a star \u2b50\ufe0f</p>"},{"location":"#who-was-this-project-made-for","title":"Who was this project made for?","text":"<p>Everybody who wants to implement chat and notifications in their project. For example, frontend developers who needs chat and/or notifications functionality.  </p>"},{"location":"#how-it-works","title":"How it works","text":"<ol> <li>Any microservice or client just sends some message via REST API or WebSockets  with the indication of the chat it belongs to. If message was sent to another user, the chat will be created automatically after the first message.</li> <li>This message first goes to queue to avoid overloading the database.  </li> <li>Then it's processed by the worker and saved to the database.  </li> <li>After that, the message is sent to real-time chat via WebSockets.</li> </ol> <p>Message history can be retrieved via REST API or WebSockets.  </p> <p>If you find this project useful, please consider giving it a star \u2b50\ufe0f</p>"},{"location":"#demo","title":"Demo","text":"<p>Grigory needs some pretty demo site. But I'm bad at frontend, so if you want to help, please contact me at rustam@astafeev.dev.</p> <p></p> <p>You can try the demo at https://grigory-demo.anttek.io. To test it, open 2 tabs in your browser and login as 2 different users. Then you can send messages between them.  </p> <p>There are 2 users in the demo: <code>demo-1</code> and <code>demo-2</code>. They have same password: <code>demo-123</code>.  </p> <p>API is available at https://grigory-demo.anttek.io/api. WebSockets are available at <code>wss://grigory-demo.anttek.io/ws</code>.</p>"},{"location":"misc/","title":"Misc","text":""},{"location":"misc/#postman-workspace","title":"Postman workspace","text":"<p>There's public Postman workspace with all the requests and collections. You can import it to your Postman and start testing the API right away.</p> <p></p>"},{"location":"misc/#docker-image","title":"Docker image","text":"<p>DockerHub Page</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#requirements","title":"Requirements","text":""},{"location":"quickstart/#with-docker","title":"With Docker","text":"<ul> <li>Docker with Compose</li> </ul>"},{"location":"quickstart/#without-docker","title":"Without Docker","text":"<ul> <li>Python 3.9 or higher</li> <li>PostgreSQL 12 or higher</li> <li>Redis</li> </ul>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First clone the repo</p> <pre><code>git clone https://github.com/Anttek-io/grigory.git\ncd grigory\n</code></pre>"},{"location":"quickstart/#with-docker_1","title":"With Docker","text":"<p>Create <code>.env</code> file and put at least <code>GRIGORY_WEB_PORT</code> </p> <pre><code>GRIGORY_WEB_PORT=8000\n</code></pre> <p>Run the app  </p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"quickstart/#without-docker_1","title":"Without Docker","text":"<p>Create virtual environment and install requirements:  </p> <pre><code>python3 -m venv venv\nsource venv/bin/activate # for *nix systems\nvenv\\Scripts\\activate # for Windows\npip install -r requirements.txt\n</code></pre> <p>Create <code>.env</code> file in the root directory.  </p> <p>Add database and Redis connection URLs in the <code>.env</code> file:  </p> <pre><code>DATABASE_URL=postgres://user:password@host:port/db_name\nREDIS_URL=redis://host:port\n</code></pre> <p>Run migrations:  </p> <pre><code>python manage.py migrate\n</code></pre> <p>Create superuser:  </p> <pre><code>python manage.py createsuperuser\n</code></pre> <p>Run server:  </p> <pre><code>gunicorn -w 1 --threads 1 --bind 127.0.0.1:8000\n</code></pre>"}]}